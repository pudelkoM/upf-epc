# Copyright (c) 2014-2016, The Regents of the University of California.
# Copyright (c) 2016-2017, Nefeli Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# * Neither the names of the copyright holders nor the names of their
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Update assignments to hit different QoS entries
import socket
def aton(val):
    return socket.htonl(val)
    
Metering::Qos(fields=[{'attr_name':'inport',
              'num_bytes':4},{'attr_name':'outport', 'num_bytes':4}],
              values=[{'attr_name':'qfi', 'num_bytes':1},
              {'attr_name':'cir', 'num_bytes':4},
              {'attr_name':'pir', 'num_bytes':4},
              {'attr_name':'cbs', 'num_bytes':4},
              {'attr_name':'pbs', 'num_bytes':4},
              {'attr_name':'ebs', 'num_bytes':4}])
#              {'attr_name':'split', 'num_bytes':1}])

Source() -> SetMetadata(attrs=[{'name': 'inport', 'size': 4, 'value_int': (6)},
                        {'name': 'outport', 'size':4, 'value_int':(5)}]) -> Metering

#Metering:0 -> S::Split(size=1, attribute='split') 
Metering:0 -> S::Split(size=1, attribute='qfi') 
Metering:1 -> Sink()   # used as default gate
S:1 -> Sink() # If traffic is going to this gate, meta update in QoS is not working
S:2 -> Sink()
S:3 -> Sink()
S:4 -> Sink()

Metering.add(fields=[{'value_int':aton(6)}, {'value_int':aton(5)}],
#Metering.add(fields=[{'value_int':6}, {'value_int':5}],
             gate=0,values=[{'value_int':3},{'value_int':300000},{'value_int':900000},
                            {'value_int':2048},{'value_int':2048},
                            {'value_int':2048}])
# {'value_int':2048}, {'value_int':2}])
Metering.set_default_gate(gate=1)
